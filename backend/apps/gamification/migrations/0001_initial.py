# Generated by Django 5.2.6 on 2025-09-22 11:03

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level_number', models.PositiveIntegerField(unique=True)),
                ('name', models.CharField(max_length=100)),
                ('min_points', models.PositiveIntegerField(help_text='Minimum points required for this level')),
                ('max_points', models.PositiveIntegerField(help_text='Maximum points for this level')),
                ('icon', models.CharField(blank=True, max_length=100)),
                ('color', models.CharField(default='#10B981', max_length=7)),
                ('benefits', models.JSONField(blank=True, default=dict, help_text='Level-specific benefits')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['level_number'],
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('activity', 'Activity'), ('achievement', 'Achievement'), ('milestone', 'Milestone'), ('special', 'Special'), ('community', 'Community')], max_length=20)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('icon', models.CharField(help_text='Icon class or path', max_length=100)),
                ('color', models.CharField(default='#3B82F6', help_text='Hex color code', max_length=7)),
                ('points_required', models.PositiveIntegerField(default=0)),
                ('condition_type', models.CharField(help_text='Type of condition to check', max_length=50)),
                ('condition_value', models.IntegerField(default=1, help_text='Target value for condition')),
                ('condition_data', models.JSONField(blank=True, default=dict, help_text='Additional condition parameters')),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden until earned')),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['display_order', 'name'],
                'indexes': [models.Index(fields=['category', 'is_active'], name='gamificatio_categor_508954_idx'), models.Index(fields=['rarity'], name='gamificatio_rarity_b6add4_idx')],
            },
        ),
        migrations.CreateModel(
            name='PointTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(help_text='Positive for earning, negative for spending')),
                ('transaction_type', models.CharField(choices=[('earn', 'Earn'), ('spend', 'Spend'), ('bonus', 'Bonus'), ('penalty', 'Penalty'), ('adjustment', 'Adjustment')], max_length=20)),
                ('reason', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'created_at'], name='gamificatio_user_id_d3e19d_idx'), models.Index(fields=['transaction_type'], name='gamificatio_transac_203c28_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned', models.BooleanField(default=True)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('progress', models.PositiveIntegerField(default=0, help_text='Progress towards earning this badge')),
                ('notified', models.BooleanField(default=False, help_text='Whether user was notified of earning this badge')),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to='gamification.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'earned'], name='gamificatio_user_id_a49769_idx'), models.Index(fields=['earned_at'], name='gamificatio_earned__4b40a8_idx')],
                'unique_together': {('user', 'badge')},
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.PositiveIntegerField(default=0)),
                ('level_progress', models.PositiveIntegerField(default=0, help_text='Progress towards next level')),
                ('current_login_streak', models.PositiveIntegerField(default=0)),
                ('longest_login_streak', models.PositiveIntegerField(default=0)),
                ('current_activity_streak', models.PositiveIntegerField(default=0)),
                ('longest_activity_streak', models.PositiveIntegerField(default=0)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('last_login_date', models.DateField(blank=True, null=True)),
                ('applications_submitted', models.PositiveIntegerField(default=0)),
                ('opportunities_bookmarked', models.PositiveIntegerField(default=0)),
                ('resources_completed', models.PositiveIntegerField(default=0)),
                ('forum_posts', models.PositiveIntegerField(default=0)),
                ('forum_likes_received', models.PositiveIntegerField(default=0)),
                ('mentoring_sessions', models.PositiveIntegerField(default=0)),
                ('workshops_attended', models.PositiveIntegerField(default=0)),
                ('badges_earned', models.PositiveIntegerField(default=0)),
                ('rare_badges_earned', models.PositiveIntegerField(default=0)),
                ('show_progress', models.BooleanField(default=True)),
                ('email_notifications', models.BooleanField(default=True)),
                ('public_profile', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamification.level')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='gamification_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['total_points'], name='gamificatio_total_p_8e08af_idx'), models.Index(fields=['current_level'], name='gamificatio_current_e83bb3_idx')],
            },
        ),
    ]
