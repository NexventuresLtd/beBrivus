# Generated by Django 5.2.6 on 2025-09-22 10:56

import django.core.validators
import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('content', models.TextField(blank=True)),
                ('resource_type', models.CharField(choices=[('guide', 'Guide'), ('template', 'Template'), ('workshop', 'Workshop'), ('video', 'Video'), ('article', 'Article'), ('tool', 'Tool'), ('checklist', 'Checklist'), ('webinar', 'Webinar')], max_length=20)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('external_url', models.URLField(blank=True, help_text='Link to external resource')),
                ('file', models.FileField(blank=True, upload_to='resources/files/')),
                ('thumbnail', models.ImageField(blank=True, upload_to='resources/thumbnails/')),
                ('is_featured', models.BooleanField(default=False)),
                ('is_premium', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('estimated_duration_minutes', models.PositiveIntegerField(blank=True, help_text='Estimated time to complete in minutes', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_resources', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Workshop',
            fields=[
                ('resource', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='resources.resource')),
                ('instructor_name', models.CharField(max_length=100)),
                ('instructor_bio', models.TextField(blank=True)),
                ('instructor_photo', models.ImageField(blank=True, upload_to='resources/instructors/')),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_recurring', models.BooleanField(default=False)),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True)),
                ('meeting_link', models.URLField(blank=True)),
                ('materials_link', models.URLField(blank=True)),
                ('prerequisites', models.TextField(blank=True, help_text='Required skills or knowledge')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('slug', models.SlugField(unique=True)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='resources.resourcecategory')),
            ],
            options={
                'verbose_name_plural': 'Resource Categories',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='resource',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='resources.resourcecategory'),
        ),
        migrations.CreateModel(
            name='ResourceCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_collections', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceCollectionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('notes', models.TextField(blank=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.resourcecollection')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.resource')),
            ],
            options={
                'ordering': ['order', 'added_at'],
            },
        ),
        migrations.AddField(
            model_name='resourcecollection',
            name='resources',
            field=models.ManyToManyField(through='resources.ResourceCollectionItem', to='resources.resource'),
        ),
        migrations.CreateModel(
            name='ResourceComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_approved', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='resources.resourcecomment')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='resources.resource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ResourceDownload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('downloaded_at', models.DateTimeField(auto_now_add=True)),
                ('file_name', models.CharField(blank=True, max_length=255)),
                ('file_size_bytes', models.PositiveIntegerField(blank=True, null=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to='resources.resource')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('bookmarked', 'Bookmarked')], default='not_started', max_length=20)),
                ('progress_percentage', models.PositiveIntegerField(default=0, help_text='Percentage of completion', validators=[django.core.validators.MaxValueValidator(100)])),
                ('time_spent_minutes', models.PositiveIntegerField(default=0)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Personal notes about the resource')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='resources.resource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_progress', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='resources.resource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_ratings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('time_spent_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_views', to='resources.resource')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WorkshopRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('attended', models.BooleanField(default=False)),
                ('completion_certificate_issued', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workshop_registrations', to=settings.AUTH_USER_MODEL)),
                ('workshop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='resources.workshop')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceBookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to='resources.resource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_bookmarks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('resource', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['resource_type', 'category'], name='resources_r_resourc_0e1f25_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['is_featured', 'is_published'], name='resources_r_is_feat_9e28cb_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['created_at'], name='resources_r_created_215cda_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['view_count'], name='resources_r_view_co_837e5e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='resourcecollectionitem',
            unique_together={('collection', 'resource')},
        ),
        migrations.AlterUniqueTogether(
            name='resourcecollection',
            unique_together={('user', 'name')},
        ),
        migrations.AddIndex(
            model_name='resourcedownload',
            index=models.Index(fields=['resource', 'downloaded_at'], name='resources_r_resourc_fb4e4a_idx'),
        ),
        migrations.AddIndex(
            model_name='resourcedownload',
            index=models.Index(fields=['user', 'downloaded_at'], name='resources_r_user_id_de4e64_idx'),
        ),
        migrations.AddIndex(
            model_name='resourceprogress',
            index=models.Index(fields=['user', 'status'], name='resources_r_user_id_95e00b_idx'),
        ),
        migrations.AddIndex(
            model_name='resourceprogress',
            index=models.Index(fields=['resource', 'status'], name='resources_r_resourc_f80f2a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='resourceprogress',
            unique_together={('resource', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='resourcerating',
            unique_together={('resource', 'user')},
        ),
        migrations.AddIndex(
            model_name='resourceview',
            index=models.Index(fields=['resource', 'viewed_at'], name='resources_r_resourc_b1227b_idx'),
        ),
        migrations.AddIndex(
            model_name='resourceview',
            index=models.Index(fields=['user', 'viewed_at'], name='resources_r_user_id_b10f28_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workshopregistration',
            unique_together={('workshop', 'user')},
        ),
    ]
